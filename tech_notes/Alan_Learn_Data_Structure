
stack -- a stack of card
	It is storage list or array
	-- last-in and first-out


	Charactic:
		size of a stack
		top pointer -- pointer point to the top of the stack
		push() data into the stack
		pop()  data out from the top of the stack



class stack:
    size = 0
    top = 0
    buff = []
    #buff = range(10)
    #buff = [0,1,2,3,4,5,6,7,8,9]

    def __init__(self, s):
        stack.size = s
        stack.buff = [None] * s
        print stack.buff
        
    def push(self, el):
        stack.buff[stack.top] = el
        stack.top += 1

    def pop(self):
        stack.top -= 1
        return stack.buff[stack.top]

    def isEmpty(self):
        if stack.top == 0:
            return True
        else:
            return False

    def isFull(self):
        if stack.top == stack.size -1:
            return True
        else:
            return False

st = stack(100)
if st.isEmpty():
    print 'yes, it is Empty'
else:
    print 'no, it is not Empty'
		


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
QUEUE

	It is storage list or array
		-- first-in and first-out


	Charactic:
		size of a queue
		front pointer --
		rear pointer -- 
		enqueue() push data into the queue
		dequeue()  data out from the top of the queue


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Binary-Tree

{
  "top": {
    "l1_A": {
		l2_A: {
		}
		l2_B:
	    }
    "l1_B": "commonjs",
	}
}
